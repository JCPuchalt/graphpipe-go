// automatically generated by the FlatBuffers compiler, do not modify

package graphpipe

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type InferRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsInferRequest(buf []byte, offset flatbuffers.UOffsetT) *InferRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &InferRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *InferRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *InferRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *InferRequest) Config() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *InferRequest) InputNames(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *InferRequest) InputNamesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *InferRequest) InputTensors(obj *Tensor, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *InferRequest) InputTensorsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *InferRequest) OutputNames(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *InferRequest) OutputNamesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func InferRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func InferRequestAddConfig(builder *flatbuffers.Builder, config flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(config), 0)
}
func InferRequestAddInputNames(builder *flatbuffers.Builder, inputNames flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(inputNames), 0)
}
func InferRequestStartInputNamesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func InferRequestAddInputTensors(builder *flatbuffers.Builder, inputTensors flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(inputTensors), 0)
}
func InferRequestStartInputTensorsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func InferRequestAddOutputNames(builder *flatbuffers.Builder, outputNames flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(outputNames), 0)
}
func InferRequestStartOutputNamesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func InferRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
