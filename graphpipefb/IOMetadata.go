// automatically generated by the FlatBuffers compiler, do not modify

package graphpipe

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IOMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsIOMetadata(buf []byte, offset flatbuffers.UOffsetT) *IOMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IOMetadata{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *IOMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IOMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IOMetadata) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IOMetadata) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IOMetadata) Shape(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *IOMetadata) ShapeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *IOMetadata) Type() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IOMetadata) MutateType(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func IOMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func IOMetadataAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func IOMetadataAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func IOMetadataAddShape(builder *flatbuffers.Builder, shape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(shape), 0)
}
func IOMetadataStartShapeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func IOMetadataAddType(builder *flatbuffers.Builder, type_ byte) {
	builder.PrependByteSlot(3, type_, 0)
}
func IOMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
